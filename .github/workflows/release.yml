# 工作流名称
name: Download, Build & Release WULU AI Base

# 触发条件
on:
  push:
    tags: ['v*']

# 任务列表
jobs:
  # --- 任务1: Windows ---
  build-windows-x64:
    name: Build for Windows (x64)
    runs-on: windows-latest
    steps:
      - name: Checkout repository with LFS
        uses: actions/checkout@v4
        with:
          lfs: true
      # 新增：下载官方预编译包
      - name: Download llama.cpp pre-compiled binary
        run: Invoke-WebRequest -Uri "https://github.com/ggerganov/llama.cpp/releases/download/b2734/llama-b2734-bin-win-cpu-x64.zip" -OutFile "llama-bin.zip"
      # 新增：解压程序包
      - name: Unzip binary package
        run: Expand-Archive -Path "llama-bin.zip" -DestinationPath "llama-bin"
      - name: Create staging directory
        run: mkdir staging
      - name: Copy files to staging
        run: |
          mkdir staging/bin
          cp llama-bin/llama-server.exe staging/bin/
          cp llama-bin/*.dll staging/bin/
          cp -r model staging/
      - name: Install Inno Setup
        shell: powershell
        run: |
          Invoke-WebRequest -Uri "https://jrsoftware.org/download.php/is.exe" -OutFile "is-setup.exe"
          Start-Process -FilePath "is-setup.exe" -ArgumentList "/SP- /VERYSILENT /SUPPRESSMSGBOXES /NORESTART" -Wait
      - name: Add Inno Setup to PATH
        run: echo "C:\Program Files (x86)\Inno Setup 6" >> $env:GITHUB_PATH
      - name: Run Inno Setup Compiler
        run: iscc "packaging/windows/setup.iss"
      - name: Upload Windows Installer Artifact
        uses: actions/upload-artifact@v4
        with:
          name: installer-windows-x64
          path: packaging/windows/Output/*.exe

  # --- 任务2: Linux x64 ---
  build-linux-x64:
    name: Build for Linux (x64)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
      # 新增：下载并安装 unzip
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y dos2unix unzip
      # 新增：下载官方预编译包
      - name: Download llama.cpp pre-compiled binary
        run: wget "https://github.com/ggerganov/llama.cpp/releases/download/b2734/llama-b2734-bin-ubuntu-x64.zip" -O llama-bin.zip
      # 新增：解压程序包
      - name: Unzip binary package
        run: unzip llama-bin.zip -d llama-bin
      - name: Create Debian package structure
        run: |
          mkdir -p staging/DEBIAN
          mkdir -p staging/opt/WuluAIBase/bin
          mkdir -p staging/opt/WuluAIBase/model
          mkdir -p staging/usr/share/applications
      - name: Prepare files for packaging
        run: |
          dos2unix packaging/linux/control_template
          cp packaging/linux/control_template staging/DEBIAN/control
          echo "Architecture: amd64" >> staging/DEBIAN/control
          cp llama-bin/llama-server staging/opt/WuluAIBase/bin/
          cp -r model/* staging/opt/WuluAIBase/model/
          cp packaging/linux/wulu-ai-base.desktop staging/usr/share/applications/
      - name: Generate .deb package
        run: dpkg-deb --build staging setup-wulu-ai-base-linux-x64-v${{ github.ref_name }}.deb
      - name: Upload Linux x64 Installer Artifact
        uses: actions/upload-artifact@v4
        with:
          name: installer-linux-x64
          path: ./*.deb

  # --- 任务3: Linux ARM64 ---
  build-linux-arm64:
    name: Build for Linux (ARM64)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y dos2unix unzip
      # 新增：下载官方预编译的 ARM 包
      - name: Download llama.cpp pre-compiled ARM binary
        run: wget "https://github.com/ggerganov/llama.cpp/releases/download/b2734/llama-b2734-bin-linux-arm64.zip" -O llama-bin.zip
      - name: Unzip binary package
        run: unzip llama-bin.zip -d llama-bin
      - name: Create Debian package structure
        run: |
          mkdir -p staging/DEBIAN
          mkdir -p staging/opt/WuluAIBase/bin
          mkdir -p staging/opt/WuluAIBase/model
          mkdir -p staging/usr/share/applications
      - name: Prepare files for ARM packaging
        run: |
          dos2unix packaging/linux/control_template
          cp packaging/linux/control_template staging/DEBIAN/control
          echo "Architecture: arm64" >> staging/DEBIAN/control
          cp llama-bin/llama-server staging/opt/WuluAIBase/bin/
          cp -r model/* staging/opt/WuluAIBase/model/
          cp packaging/linux/wulu-ai-base.desktop staging/usr/share/applications/
      - name: Generate .deb package for ARM64
        run: dpkg-deb --build staging setup-wulu-ai-base-linux-arm64-v${{ github.ref_name }}.deb
      - name: Upload Linux ARM64 Installer Artifact
        uses: actions/upload-artifact@v4
        with:
          name: installer-linux-arm64
          path: ./*.deb